openapi: 3.0.2
info:
  title: 'Sport Guide API'
  version: '1.0'
tags:
  - name: "Пользователи"
    description: "Операции с пользователями"
  - name: "Аутентификация"
    description: "Операции с токенами"
  - name: "Категории"
    description: "Операции с категориями"
  - name: "Площадки"
    description: "Операции с площадками"
  - name: "Комментарии"
    description: "Операции с комментариями"


paths:
  /api/auth/users/:
    get:
      operationId: listCustomUsers
      summary: "Список пользователей"
      description: "Получение списка всех зарегистрированных пользователей. Нужна авторизация."
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Успешное получение списка пользователей."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    nickname:
                      type: string
                    email:
                      type: string
                    photo:
                      type: string
      tags:
      - Пользователи
    post:
      operationId: createCustomUser
      summary: "Создать пользователя"
      description: "Создание нового пользователя."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        description: "Данные нового пользователя."
      responses:
        '201':
          description: 'Пользователь создан'
          content:
            application/json:
              schema:
                  properties:
                    id:
                      type: integer
                    nickname:
                      type: string
                    email:
                      type: string
      tags:
      - Пользователи

  /api/auth/users/me/:
    get:
      operationId: meCustomUser
      summary: "Профиль пользователя"
      description: "Получение данных текущего пользователя."
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Успешное получение данных пользователя."
          content:
            application/json:
              schema:
                  properties:
                    id:
                      type: integer
                    nickname:
                      type: string
                    email:
                      type: string
      tags:
      - Пользователи
    patch:
      operationId: patchCustomUser
      summary: "Изменение профиля"
      description: "Изменение данных текущего пользователя. Нужна авторизация"
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUser'
        description: "Частично обновлённые данные пользователя."
      responses:
        '200':
          description: "Успешное измененение профиля пользователя"
          content:
            application/json:
              schema:
                  properties:
                    id:
                      type: integer
                    nickname:
                      type: string
                    email:
                      type: string
                    photo:
                      type: string
      tags:
      - Пользователи
    delete:
      operationId: deleteCustomUser
      summary: "Удалить профиль"
      description: "Удаление профиля текущего пользователя."
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: "Текущий пароль"
      responses:
        '204':
          description: "Успешное удаление пользователя"
      tags:
      - Пользователи

  /api/categories/:
    get:
      operationId: listCategories
      summary: 'Получить список всех категорий'
      description: 'Получение списка всех категорий. Авторизация не требуется.'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: 'Список категорий'
      tags:
      - Категории
    post:
      operationId: createCategory
      summary: 'Создать новую категорию'
      description: 'Создание новой категории. Доступ имеют только администраторы. Нужна авторизация.'
      security:
        - BearerAuth: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: 'Категория создана'
      tags:
      - Категории
  /api/categories/{id}/:
    get:
      operationId: retrieveCategory
      summary: 'Получить категорию по ID'
      description: 'Получение категории по ID. Авторизация не требуется.'
      parameters:
      - name: id
        in: path
        required: true
        description: "ID категории"
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: 'Детальная информация о категории'
      tags:
      - Категории
    patch:
      operationId: partialUpdateCategory
      summary: 'Обновить категорию по ID'
      description: 'Обновление категории по ID. Доступ имеют только администраторы. Нужна авторизация.'
      security:
        - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: "ID категории"
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: 'Категория обновлена'
      tags:
      - Категории
    delete:
      operationId: destroyCategory
      summary: 'Удалить категорию по ID'
      description: ''
      security:
        - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: "ID категории"
        schema:
          type: string
      responses:
        '204':
          description: 'Категория удалена'
      tags:
      - Категории
  /api/areas/:
    get:
      operationId: listAreaShorts
      summary: 'Получить список всех площадок'
      description: 'Получение списка всех площадок. Авторизация не требуется.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AreaShort'
          description: 'Список площадок'
      tags:
      - Площадки
    post:
      operationId: createArea
      summary: 'Создать новую площадку'
      description: 'Создание новой категории. Нужна авторизация.'
      security:
        - BearerAuth: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                latitude:
                  type: number
                  format: double
                  example: 11.111111
                  description: "Широта"
                longitude:
                  type: number
                  format: double
                  example: 22.222222
                  description: "Долгота"
                categories:
                  type: array
                  items:
                    type: integer
                  example: [1, 2]
                  description: "Список идентификаторов категорий"
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
          description: 'Площадка создана'
      tags:
      - Площадки
  /api/areas/{id}/:
    get:
      operationId: retrieveArea
      summary: 'Получить площадку по ID'
      description: 'Получение площадки по ID. Авторизация не требуется.'
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
          description: 'Детальная информация о площадке'
      tags:
      - Площадки
    patch:
      operationId: partialUpdateArea
      summary: 'Обновить площадку по ID'
      description: 'Обновление площадки по ID. Доступ имеют только автор или администратор. Нужна авторизация.'
      security:
        - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Area'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Area'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Area'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
          description: 'Площадка обновлена'
      tags:
      - Площадки
    delete:
      operationId: destroyArea
      summary: 'Удалить площадку по ID'
      description: 'Удаление площадки по ID. Доступ имеют только автор или администратор. Нужна авторизация.'
      security:
        - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: 'Площадка удалена'
      tags:
      - Площадки
  /api/areas/{id}/comments/:
    get:
      operationId: commentsArea
      summary: 'Получить комментарии к площадке'
      description: 'Получение комментариев к определенной площадке. Авторизация не требуется.'
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''
      tags:
      - Площадки
  /api/areas/{id}/add_images/:
    post:
      operationId: addImagesArea
      summary: 'Добавить фотографии к площадке'
      description: 'Добавление фотографий к определенной площадке. Доступ имеет автор или администратор. Нужна авторизация.'
      security:
        - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: "Файлы для загрузки"
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 13
                    image:
                      type: string
                      example: "/media/area_images/image.jpg"
          description: 'Фотографии добавлены'
      tags:
      - Площадки
  /api/comments/:
    get:
      operationId: listComments
      summary: 'Получить список всех комментариев'
      description: 'Получение списка всех комментариев. Авторизация не требуется.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: 'Список комментариев'
      tags:
      - Комментарии
    post:
      operationId: createComment
      summary: 'Создать новый комментарий'
      description: 'Создание нового комментария. Нужна авторизация.'
      security:
        - BearerAuth: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                area:
                  type: integer
                  example: 0
                  description: "ID площадки"
                comment:
                  type: string
                  example: "string"
                  description: "Текст комментария"
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Комментарий создан'
      tags:
      - Комментарии
  /api/comments/{id}/:
    get:
      operationId: retrieveComment
      summary: 'Получить комментарий по ID'
      description: 'Получение комментария по ID. Авторизация не требуется.'
      security:
        - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Детальная информация о комментарии'
      tags:
      - Комментарии
    patch:
      operationId: partialUpdateComment
      summary: 'Изменить комментарий по ID'
      description: 'Изменение комментария по ID. Доступ имеют только авторы или администраторы. Нужна авторизация.'
      security:
        - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                area:
                  type: integer
                  example: 0
                  description: "ID площадки"
                comment:
                  type: string
                  example: "string"
                  description: "Текст комментария"
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Комментарий изменен'
      tags:
      - Комментарии
    delete:
      operationId: destroyComment
      summary: 'Удаление комментария по ID'
      description: 'Удаление комментария по ID. Доступ имеет только автор или администратор. Нужна авторизация.'
      security:
        - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: 'Комментарий удален'
      tags:
      - Комментарии



  /api/auth/users/set_password/:
    post:
      operationId: setPasswordCustomUser
      summary: "Установка нового пароля"
      description: "Установка нового пароля пользователя."
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
      responses:
        '200':
          description: "Новый пароль успешно установлен."
      tags:
      - Пользователи


  /api/auth/jwt/create/:
    post:
      operationId: createTokenObtainPair
      summary: "Создание JWT"
      description: "Создание пары токенов доступа и обновления JWT для аутентификации пользователя."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '200':
          description: "Успешное получение токенов доступа и обновления"
          content:
            application/json:
              schema:
                type: object
                properties:
                  refresh:
                    type: string
                    example: "string"
                  access:
                    type: string
                    example: "string"
      tags:
      - Аутентификация

  /api/auth/jwt/refresh/:
    post:
      operationId: createTokenRefresh
      summary: "Обновление JWT"
      description: "Обновление токена доступа JWT с использованием токена обновления."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '200':
          description: "Успешное получение токена доступа"
          content:
            application/json:
              schema:
                type: object
                properties:
                  access:
                    type: string
                    example: "string"
      tags:
      - Аутентификация

  /api/auth/jwt/verify/:
    post:
      operationId: createTokenVerify
      summary: "Проверка JWT"
      description: "Проверка валидности токена JWT."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
      tags:
      - Аутентификация


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CustomUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        nickname:
          type: string
          maxLength: 20
          minLength: 6
          pattern: ^[-a-zA-Z0-9_]+$
        email:
          type: string
          format: email
          maxLength: 254
        photo:
          type: string
          format: binary
          nullable: true
      required:
      - nickname
      - email
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - name
    AreaShort:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: object
          properties:
            id:
              type: integer
              readOnly: true
            nickname:
              type: string
              maxLength: 20
              minLength: 6
              pattern: ^[-a-zA-Z0-9_]+$
            email:
              type: string
              format: email
              maxLength: 254
            photo:
              type: string
              format: binary
              nullable: true
          required:
          - nickname
          - email
        latitude:
          type: string
          format: decimal
          multipleOf: 1.0e-06
          maximum: 1000
          minimum: -1000
        longitude:
          type: string
          format: decimal
          multipleOf: 1.0e-06
          maximum: 1000
          minimum: -1000
        categories:
          type: array
          items:
            type: integer
      required:
      - author
      - latitude
      - longitude
      - categories
    Area:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: object
          properties:
            id:
              type: integer
              readOnly: true
            nickname:
              type: string
              maxLength: 20
              minLength: 6
              pattern: ^[-a-zA-Z0-9_]+$
            email:
              type: string
              format: email
              maxLength: 254
            photo:
              type: string
              format: binary
              nullable: true
          required:
          - nickname
          - email
        latitude:
          type: string
          format: decimal
          multipleOf: 1.0e-06
          maximum: 1000
          minimum: -1000
        longitude:
          type: string
          format: decimal
          multipleOf: 1.0e-06
          maximum: 1000
          minimum: -1000
        categories:
          type: array
          items:
            type: integer
        images:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                readOnly: true
              image:
                type: string
                format: binary
            required:
            - image
          readOnly: true
      required:
      - latitude
      - longitude
      - categories
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: object
          properties:
            id:
              type: integer
              readOnly: true
            nickname:
              type: string
              maxLength: 20
              minLength: 6
              pattern: ^[-a-zA-Z0-9_]+$
            photo:
              type: string
              format: binary
              nullable: true
          required:
          - nickname
        area:
          type: integer
        comment:
          type: string
        date_added:
          type: string
          format: date-time
          readOnly: true
      required:
      - area
      - comment
    UserCreate:
      type: object
      properties:
        nickname:
          type: string
          maxLength: 20
          minLength: 6
          pattern: ^[-a-zA-Z0-9_]+$
        email:
          type: string
          format: email
          maxLength: 254
        id:
          type: integer
          readOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - nickname
      - email
      - password
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - new_password
      - current_password
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token